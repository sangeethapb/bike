{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f4ccec66-ae33-4c58-89e6-68bf48d1e84d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "# Replace 'your_data.csv' with your actual file path\n",
    "data = pd.read_csv('bike_rent (1).csv')\n",
    "\n",
    "def replace_question_marks_with_nan(data):\n",
    "    # Replace '?' with NaN in the entire DataFrame\n",
    "    data.replace('?', float(\"nan\"), inplace=True)\n",
    "    return data\n",
    "data = replace_question_marks_with_nan(data)\n",
    "data\n",
    "data['dteday'] = pd.to_datetime(data['dteday'], format='%d-%m-%Y')\n",
    "\n",
    "# Extract day and month\n",
    "data['day'] = data['dteday'].dt.day\n",
    "data['month'] = data['dteday'].dt.month\n",
    "data = data.drop(['dteday', 'instant','temp',\"atemp\",\"hum\",\"windspeed\",\"mnth\",\"casual\",\"registered\"], axis=1)\n",
    "data.head()\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "# Apply label encoding to each categorical column\n",
    "data['season'] = label_encoder.fit_transform(data['season'])\n",
    "data['holiday'] = label_encoder.fit_transform(data['holiday'])\n",
    "data['workingday'] = label_encoder.fit_transform(data['workingday'])\n",
    "data['weathersit'] = label_encoder.fit_transform(data['weathersit'])\n",
    "X = data.drop('cnt', axis=1)\n",
    "y = data['cnt']\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "# Create Random Forest Regressor\n",
    "rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "# Train the model\n",
    "rf_model.fit(X_train, y_train)\n",
    "def main():\n",
    "    st.title(\"Bike Rental Prediction\")\n",
    "\n",
    "    # User input for prediction\n",
    "    season = st.selectbox(\"season\", data['season'].unique())\n",
    "    yr = data['yr'].unique()\n",
    "    yr = st.selectbox(\"yr\", yr)\n",
    "    hr = st.slider(\"hr\", min_value=data['hr'].min(), max_value=data['hr'].max(), value=data['hr'].min())\n",
    "    holiday = st.selectbox(\"holiday\", data['holiday'].unique())\n",
    "    weekday = st.selectbox(\"weekday\", data['weekday'].unique())\n",
    "    workingday = st.selectbox(\"workingday\", data['workingday'].unique())\n",
    "    weathersit = st.selectbox(\"weathersit\", data['weathersit'].unique())\n",
    "    day = st.slider(\"day\", min_value=data['day'].min(), max_value=data['day'].max(), value=data['day'].min())\n",
    "    month = st.slider(\"month\", min_value=data['month'].min(), max_value=data['month'].max(), value=data['month'].min())\n",
    "    \n",
    "    # Create a dataframe with user input\n",
    "    user_input = pd.DataFrame({\n",
    "        'season': [season],\n",
    "        'yr': [yr],\n",
    "        'hr': [hr],\n",
    "        'holiday': [holiday],\n",
    "        'weekday': [weekday],\n",
    "        'workingday': [workingday],\n",
    "        'weathersit': [weathersit],\n",
    "        'day': [day],     \n",
    "        'month':[month]\n",
    "    })\n",
    "\n",
    "    # Make prediction\n",
    "    prediction = rf_model.predict(user_input)\n",
    "\n",
    "    st.subheader(\"Predicted Bike Rentals:\")\n",
    "    st.write(prediction[0])\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
